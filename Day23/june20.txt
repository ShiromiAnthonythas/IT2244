01) Write a C program that creates two threads. Each thread should print a message indicating it is running. 
The main thread should wait for both threads to finish before exiting. 

#include <stdio.h>
#include <pthread.h>

// Function to be run by each thread
void* threadFunction(void* arg) {
    int threadNum = *((int*)arg);
    printf("Thread %d is running.\n", threadNum);
    return NULL;
}

int main() {
    pthread_t thread1, thread2;
    int t1 = 1, t2 = 2;

    // Create the first thread
    if (pthread_create(&thread1, NULL, threadFunction, &t1) != 0) {
        perror("Failed to create thread 1");
        return 1;
    }

    // Create the second thread
    if (pthread_create(&thread2, NULL, threadFunction, &t2) != 0) {
        perror("Failed to create thread 2");
        return 1;
    }

    // Wait for both threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Main thread: Both threads have finished. Exiting.\n");
    return 0;
}

02) Write a program to create 5 threads. Each thread should print its thread ID and then exit. 
The main thread should join all threads and print a completion message.

#include <stdio.h>
#include <pthread.h>

// Thread function
void* threadFunction(void* arg) {
    pthread_t tid = pthread_self(); // Get the thread ID
    printf("Thread ID: %lu is running.\n", (unsigned long)tid);
    return NULL;
}

int main() {
    pthread_t threads[5];

    // Create 5 threads
    for (int i = 0; i < 5; i++) {
        if (pthread_create(&threads[i], NULL, threadFunction, NULL) != 0) {
            perror("Failed to create thread");
            return 1;
        }
    }

    // Join all threads
    for (int i = 0; i < 5; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("Main thread: All threads have completed.\n");
    return 0;
}


03) Write a program that creates a thread which prints numbers from 1 to 10 with a 1-second delay between each number. 
The main thread wait for this thread to finish

#include <stdio.h>
#include <pthread.h>
#include <unistd.h> // for sleep()

// Thread function to print numbers 1 to 10
void* printNumbers(void* arg) {
    for (int i = 1; i <= 10; i++) {
        printf("%d\n", i);
        sleep(1); // wait for 1 second
    }
    return NULL;
}

int main() {
    pthread_t thread;

    // Create a thread
    if (pthread_create(&thread, NULL, printNumbers, NULL) != 0) {
        perror("Failed to create thread");
        return 1;
    }

    // Main thread waits for the created thread to finish
    pthread_join(thread, NULL);

    printf("Main thread: Number printing completed.\n");
    return 0;
}


04) Create two threads where one thread increments a global counter 100 times and the other thread decrements the same 
counter 100 times.Print the final value of the counter after both threads finish.

#include <stdio.h>
#include <pthread.h>

int counter = 0;                 // Global counter
pthread_mutex_t lock;           // Mutex to protect access

void* increment(void* arg) {
    for (int i = 0; i < 100; i++) {
        pthread_mutex_lock(&lock);
        counter++;
        pthread_mutex_unlock(&lock);
    }
    return NULL;
}

void* decrement(void* arg) {
    for (int i = 0; i < 100; i++) {
        pthread_mutex_lock(&lock);
        counter--;
        pthread_mutex_unlock(&lock);
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;

    pthread_mutex_init(&lock, NULL);  // Initialize mutex

    pthread_create(&t1, NULL, increment, NULL);
    pthread_create(&t2, NULL, decrement, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    pthread_mutex_destroy(&lock);     // Clean up mutex

    printf("Final value of counter: %d\n", counter);
    return 0;
}


05) Implement a thread function that takes an integer argument, squares it, and returns the result to the main thread using 
pthread_exit and pthread_join.

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Thread function to square a number
void* squareNumber(void* arg) {
    int num = *((int*)arg);
    int* result = malloc(sizeof(int)); // Allocate memory to hold the result
    if (result == NULL) {
        perror("Failed to allocate memory");
        pthread_exit(NULL);
    }

    *result = num * num;
    pthread_exit((void*)result); // Return the result via pthread_exit
}

int main() {
    pthread_t thread;
    int number = 7; // Example input
    int* squaredResult;

    // Create the thread
    if (pthread_create(&thread, NULL, squareNumber, &number) != 0) {
        perror("Failed to create thread");
        return 1;
    }

    // Wait for the thread to finish and get the result
    if (pthread_join(thread, (void**)&squaredResult) != 0) {
        perror("Failed to join thread");
        return 1;
    }

    printf("Main thread: The square of %d is %d\n", number, *squaredResult);

    free(squaredResult); // Clean up dynamically allocated memory
    return 0;
}
